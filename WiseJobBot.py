from aiogram import Bot, Dispatcher, executor, types, filters
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from config import TOKEN
from states import Form
from aiogram.contrib.fsm_storage.memory import MemoryStorage

storage = MemoryStorage()
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=storage) 

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await Form.name.set()

@dp.message_handler(state=Form.name)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await message.answer("–ü—Ä–∏–≤–µ—Ç, {0}. –ö–∞–∫–æ–π —É —Ç–µ–±—è –æ–ø—ã—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è?".format(message.text))
    await Form.next()

@dp.message_handler(state=Form.experience)
async def process_experience(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['experience'] = message.text
    await state.finish()
    await message.answer("–°–ø–∞—Å–∏–±–æ, {0}. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç—ë–º —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.".format(message.text))

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

    
    #async def cmd_handler(message: types.Message):
    #await message.answer('üëã –ü—Ä–∏–≤–µ—Ç! –Ø WJ –ë–æ—Ç.\n\n–Ø –ø–æ–º–æ–≥–∞—é –∫–æ–º–ø–∞–Ω–∏—è–º –∏ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è–º —Ä–∞–±–æ—Ç—ã –ª–µ–≥–∫–æ –Ω–∞–π—Ç–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞.\n\nüîé–° –ø–æ–∏—Å–∫–æ–º —á–µ–≥–æ —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?!', reply_markup=kb)

#@dp.message_handler()
#sync def echo(message: types.Message):
    #if message.text == 'üßó–Ø –∏—â—É —Ä–∞–±–æ—Ç—É':
       # await start_poll(message)

#async def start_poll(message: types.Message):
   # options=["üîõ–î–∞, —Ö–æ—Ä–æ—à–æ", "üîô–ù–∞–∑–∞–¥"]
    #await bot.send_poll(message.chat.id, "–ß—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –∫–∞–∫–∏—Ö —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π –≤–∞–º –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤–∞–º –≤—Å–µ–≥–æ 5 –≤–æ–ø—Ä–æ—Å–æ–≤, –æ–∫?", options)

#@dp.poll_answer_handler()
#async def handle_poll_answer(quiz_answer: "üîõ–î–∞, —Ö–æ—Ä–æ—à–æ"):
    #if quiz_answer.option_ids[0] == 0: # –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞
        #options=["–í—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏", "–í—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Ñ—É–Ω–∫—Ü–∏—è–º–∏", "–í—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ –ª—é–¥—å–º–∏"]
        #await bot.send_poll(quiz_answer.user.id, "1. –ö–∞–∫–æ–π —Ç–∏–ø —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–º –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç?", options)

#async def start_poll(message: types.Message):
    #options=["–í—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏", "–í—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Ñ—É–Ω–∫—Ü–∏—è–º–∏", "–í—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ –ª—é–¥—å–º–∏"]
    #await bot.send_poll(message.chat.id, "1. –ö–∞–∫–æ–π —Ç–∏–ø —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–º –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç?", options)

#@dp.message_handler(filters.Text(equals='Option 1'))
#async def cmd_handler(message: types.Message):
   # await message.answer ()

#@dp.message_handler()
#async def echo(message: types.Message):
    #await message.answer(message.text)
